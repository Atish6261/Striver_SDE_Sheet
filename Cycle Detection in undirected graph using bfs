#include<bits/stdc++.h>
bool bfs(int node,int par,vector<int>adj[],vector<int>&vis){
    vis[node]=1;
   queue<pair<int, int> > q;
    q.push({node,par});
    while(!q.empty()){
        int curr=q.front().first;
        int parent=q.front().second;
        q.pop();
        for(auto it:adj[curr]){
            if(!vis[it]){
                vis[it]=1;
                q.push({it,curr});
            }else if(parent!=it){
                return true;
            }
        }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    vector<int>adj[n+1];
    for(auto it:edges){
        int u=it[0];
        int v=it[1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    vector<int>vis(n+1,0);
    for(int i=1;i<=n;i++){
        if(!vis[i]){
            bool flag=bfs(i,-1,adj,vis);
            if(flag==true) return "Yes";
        }
    }
     return "No";
}
