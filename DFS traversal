void dfs(int node,vector<int>adj[],vector<int>&vis,vector<int>&temp){
    vis[node]=1;
    temp.push_back(node);
    for(auto it:adj[node]){
        if(!vis[it]){
            vis[it]=1;
            dfs(it,adj,vis,temp);
        }
    }
}
vector<vector<int>> depthFirstSearch(int V, int E,
 vector<vector<int>> &edges)
{
   vector<int>adj[V];
   for(auto it:edges){
       int u=it[0];
       int v=it[1];
       adj[u].push_back(v);
       adj[v].push_back(u);
   }
   vector<vector<int>>ans;

   vector<int>vis(V,0);
   for(int i=0;i<V;i++){
       vector<int>temp;
       if(!vis[i]){
           dfs(i,adj,vis,temp);
           ans.push_back(temp);
       }
   }
   return ans;
}
